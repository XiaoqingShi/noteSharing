<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="  
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">
    <!-- JNDI方式配置数据源 -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
        <property name="jndiName" value="${jndiName}"></property> </bean> -->
    <!-- 配置数据源 -->
    <!-- 配置数据源 -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
        <property name="driverClassName" value="${driverClassName}" /> <property 
        name="url" value="${jdbc_url}" /> <property name="username" value="${jdbc_username}" 
        /> <property name="password" value="${jdbc_password}" /> </bean> -->
    <bean
        id="dataSource"
        class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property
            name="driverClass"
            value="com.mysql.jdbc.Driver"></property>
        <property
            name="jdbcUrl"
            value="${jdbc_url}"></property>
        <property
            name="user"
            value="${jdbc_username}"></property>
        <property
            name="password"
            value="${jdbc_password}"></property>
    </bean>
    <!-- 配置hibernate session工厂 -->
    <bean
        id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property
            name="dataSource"
            ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.autoReconnect">true</prop>
                <!-- web项目启动时是否更新表结构 -->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <!-- 系统使用的数据库方言，也就是使用的数据库类型 -->
                <prop key="hibernate.dialect">${hibernate.dialect}
                </prop>
                <!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
                <!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop> -->
                <!-- 是否打印Hibernate生成的SQL到控制台 -->
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <!-- 是否格式化打印出来的SQL -->
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
            </props>
        </property>
        <!-- 自动扫描注解方式配置的hibernate类文件 -->
        <property name="packagesToScan">
            <list>
                <value>com.notesharing.model</value>
            </list>
        </property>
        <!-- 自动扫描hbm方式配置的hibernate文件和.hbm文件 -->
        <!-- <property name="mappingDirectoryLocations"> <list> <value>classpath:me/gacl/model/hbm</value> 
            </list> </property> -->
    </bean>
    <!-- 配置事务管理器 -->
    <bean
        name="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property
            name="sessionFactory"
            ref="sessionFactory"></property>
    </bean>
    <!-- 定义事务管理器，此是告诉Spring检查上下文中所有的Bean并查找使用@Transactional注解的Bean，而不管这个注解是用在类级别还是方法级别上 
        对每一个使用@Transactional注解的Bean，<tx:annotation-driven>会自动 为它添加事务通知。 在类级别上使用@Transactional注解，表示所有的方法都支持事务并且是只读的 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
    <!-- 拦截器方式配置事物 -->
    <tx:advice
        id="transactionAdvice"
        transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 以如下关键字开头的方法使用事物 -->
            <tx:method name="add*" />
            <tx:method name="save*" />
            <tx:method name="update*" />
            <tx:method name="modify*" />
            <tx:method name="edit*" />
            <tx:method name="delete*" />
            <tx:method name="remove*" />
            <tx:method name="repair" />
            <tx:method name="deleteAndRepair" />
            <tx:method
                name="get*"
                propagation="REQUIRED"
                read-only="true" />
            <!-- 以如下关键字开头的方法不使用事物 -->
            <!-- <tx:method name="get*" propagation="SUPPORTS" /> -->
            <tx:method
                name="find*"
                propagation="SUPPORTS" />
            <tx:method
                name="load*"
                propagation="SUPPORTS" />
            <tx:method
                name="search*"
                propagation="SUPPORTS" />
            <tx:method
                name="datagrid*"
                propagation="SUPPORTS" />
            <!-- 其他方法不使用事物 -->
            <tx:method
                name="*"
                propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!-- 切面，将事物用在哪些对象上 -->
    <aop:config>
        <aop:pointcut
            id="transactionPointcut"
            expression="execution(* com.notesharing.service.impl.*.*(..))" />
        <!-- 这样写应该就可以了 这是com.fog.travel.service..*impl包下所有的类的所有方法。。 第一个*代表所有的返回值类型 
            第二个*代表所有的类 第三个*代表类所有方法 最后一个..代表所有的参数。 -->
        <aop:advisor
            pointcut-ref="transactionPointcut"
            advice-ref="transactionAdvice" />
    </aop:config>
</beans>